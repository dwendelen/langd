%{
    #include <string>
    #include <iostream>
    #include <vector>
    #include "ast.hpp"

    int yylex();
    Block* parsedProgram;
    using namespace std;

    void yyerror(char const * msg) {
        cerr << msg << endl;
    }

    FunctionCall* createInfix(Expression* precedingExpression, FunctionCall* functionCall);
%}

%union {
    Expression* expression;
    vector<Expression*>* expressions;
    Assignment* assignment;
    vector<Assignment*>* assignments;

    Block* block;

    Type* type;
    IdReference* idReference;
    TupleType* tupleType;
    vector<TypedId>* typedIds;
    TypedId* typedId;
    FunctionType* functionType;
    FunctionCall* functionCall;

    string* string;
    int integer;
}

%token LET DEF TYPE
%token PLUS MINUS TIMES
%token LPARENT RPARENT EQUALS SEMICOLON COLON ARROW DOT COMMA
%token <integer> INT
%token <string> STRING
%token <string> ID

%type <block> program
%type <assignment> assignment letOrDef
%type <expressions> expressionChain
%type <expression> terminatedExpression expression term factor negation smallestThing memberChain functionDefinition tuple functionCallLike
%type <functionCall> functionCall

%type <type> type typeWithoutFunctionType
%type <tupleType> tupleType
%type <typedIds> typedIds
%type <typedId> typedId
%type <functionType> functionType
%type <assignments> constructItems

%start program

%%
program:
      expressionChain                   {   parsedProgram = new Block(*$1); }
    ;
expressionChain:
      expressionChain terminatedExpression
                                        {
                                            $$ = $1;
                                            $$->push_back($2);
                                        }
    | terminatedExpression              {
                                            $$ = new vector<Expression*>();
                                            $$->push_back($1);
                                        }
    ;
terminatedExpression:
      expression SEMICOLON              {   $$ = $1; }
    | TYPE ID EQUALS type SEMICOLON     {   $$ = new TypeAssignment(*$2, $4); }
    | letOrDef SEMICOLON                {   $$ = $1; }
    ;
expression:
      term                              {   $$ = $1; }
    | functionDefinition                {   $$ = $1; }
    ;
functionDefinition:
      tupleType ARROW expression        {   $$ = new FunctionDefinition($1, $3); }
    ;
term:
      term PLUS factor                  {   $$ = new PlusOp($1, $3); }
    | term MINUS factor                 {   $$ = new MinusOp($1, $3); }
    | factor
    ;
factor:
      factor TIMES negation             {   $$ = new TimesOp($1, $3); }
    | negation
    ;
negation:
      MINUS functionCallLike            {   $$ = new Negation($2); }
    | functionCallLike                  {   $$ = $1; }
    ;
functionCallLike:
      functionCall                      {   $$ = $1; }
    | memberChain DOT functionCall      {   $$ = new InfixFunctionCall($1, $3->id, $3->parameter); }
    | memberChain
    ;
functionCall:
      ID functionCallLike               {   $$ = new FunctionCall(*$1, $2); }
    ;
memberChain:
	  memberChain DOT ID                {   $$ = new MemberSelection($1, *$3); }
    //| memberChain DOT INT             {   $$ = new ArraySelection($1, $3); }
    | smallestThing                     {   $$ = $1; }
    ;
smallestThing:
      LPARENT expression RPARENT        {   $$ = $2; }
    | INT                               {   $$ = new IntValue($1); }
    | STRING                            {   $$ = new StringValue(*$1); }
    | ID                                {   $$ = new IdReference(*$1); }
    | tuple                             {   $$ = $1; }
    ;
letOrDef:
	  LET assignment                    {   $$ = $2; }
    //| DEF assignment                    {   $$ = $2; }

    ;
assignment:
      ID EQUALS expression              {   $$ = new Assignment(*$1, $3); }
    //| ID COLON typeWithoutFunctionType EQUALS expression             { $$ = new TypedAssignment(*$1, $3); }
    ;
type:
      typeWithoutFunctionType           {   $$ = $1; }
    | functionType                      {   $$ = $1; }
    ;
typeWithoutFunctionType:
      ID                                {   $$ = new IdReference(*$1); }
    | tupleType                         {   $$ = $1; }
    | LPARENT type RPARENT              {   $$ = $2; }
    //| ID L_SQ_BRACKET type R_SQ_BRACKET {   $$ = new ArrayType(*$1, $3); }
    ;
tupleType:
      LPARENT typedIds RPARENT          {   $$ = new TupleType(*$2); }
    ;
typedIds:
      typedIds COMMA typedId            {
                                            $$ = $1;
                                            $$->push_back(*$3);
                                        }
    | typedId                           {
                                            $$ = new vector<TypedId>();
                                            $$->push_back(*$1);
                                        }
    ;
typedId:
      ID COLON type                     {   $$ = new TypedId(*$1, $3); }
    ;
functionType:
      typeWithoutFunctionType ARROW type{   $$ = new FunctionType($1, $3); }
    ;
tuple:
      LPARENT constructItems RPARENT    {   $$ = new Tuple(*$2); }
    ;
constructItems:
      constructItems COMMA assignment   {
                                            $$ = $1;
                                            $$->push_back($3);
                                        }
    | assignment                        {
                                            $$ = new vector<Assignment*>();
                                            $$->push_back($1);
                                        }
    ;
%%

FunctionCall* createInfix(Expression* precedingExpression, FunctionCall* functionCall) {
    return functionCall;
}
