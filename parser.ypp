%{
	#include <string>
	#include <iostream>
	#include <vector>


	int yylex();
	using namespace std;
	
	void yyerror(char const * msg) {
		cerr << msg << endl;	
	}
	#define YYSTYPE vector<string>*
	void indent(vector<string>* target, vector<string>* lines) {
		for(string line: *lines) {
			target->push_back("    " + line);
		}
	}
%}
%token INT PLUS MINUS TIMES LPARENT RPARENT STRING ID EQUALS SEMICOLON COLON ARROW DOT COMMA
%start program

%%
program:
	chainedStatements { 
			for(string line: *$1) {
				cout << line << endl;
			}
			$$ = $1;
		}
	;
chainedStatements:
    chainedStatements statement {
            $$ = new vector<string>(); 
            for(string line: *$1) {
				$$->push_back(line);
			}
            for(string line: *$2) {
				$$->push_back(line);
			}
        }
    | statement
    ;
statement:
    expression SEMICOLON { $$ = $1; }
    | assignment SEMICOLON { $$ = $1; }
    ;
expression:
	term
	;
term:
	term PLUS factor { 
			$$ = new vector<string>(); 
			$$->push_back("(");
			indent($$, $1);
			$$->push_back("+");
			indent($$, $3);
			$$->push_back(")");
		}
    | term MINUS factor {
			$$ = new vector<string>();  
			$$->push_back("(");
			indent($$, $1);
			$$->push_back("-");
			indent($$, $3);
			$$->push_back(")");
		}
	| factor
    ;
factor:
	factor TIMES minusSomething { 
			$$ = new vector<string>(); 
			$$->push_back("(");
			indent($$, $1);
			$$->push_back("*");
			indent($$, $3);
			$$->push_back(")");
		}
	| minusSomething
	;
minusSomething:
	MINUS smallestThing {
			$$ = new vector<string>();  
			$$->push_back("-(");
			indent($$, $2);
			$$->push_back(")");
		}
	| smallestThing
	;
smallestThing:
	LPARENT expression RPARENT { 
			$$ = $2;
		}
	| INT { 
			$$ = new vector<string>();
			$$->push_back((*$1)[0]);
		}
    | STRING {
            $$ = new vector<string>();
			$$->push_back((*$1)[0]);
        }
    | ID {
            $$ = new vector<string>();
			$$->push_back("id("+(*$1)[0] + ")");
        }
	;
assignment:
    ID EQUALS expression { 
            $$ = new vector<string>();
			$$->push_back((*$1)[0] + " =");
            indent($$, $3);
        }
    | ID EQUALS typeDeclaration { 
            $$ = new vector<string>();
			$$->push_back((*$1)[0] + " =");
            indent($$, $3);
        }
    ;
typeDeclaration:
    LPARENT typeItemList RPARENT { 
			$$ = new vector<string>(); 
			$$->push_back("(");
			indent($$, $2);
			$$->push_back(")");
		}
    ;
typeItemList:
    typeItemList COMMA typeItem { 
			$$ = new vector<string>(); 
			$$->push_back((*$1)[0] + ", " + (*$3)[0]);
		}
    | typeItem
    ;
typeItem:
    ID COLON ID { 
			$$ = new vector<string>(); 
			$$->push_back((*$1)[0] + ": type(" + (*$3)[0] + ")");
		}
    ;
%%

int main() {
    int i;
    //while((i = yylex())!=0) {
    //    cout << i << endl;
    //}
	return yyparse();
}
